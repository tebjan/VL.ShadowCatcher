shader ShadowDraw_DrawFX : VS_PS_Base, ShadowCatcherDirectional, ShadowCatcherSpot, ShadowCatcherPointCubeMap
{
    [Color]
    stage float4 ShadowTint = float4(0, 0, 0, 1);

    [Color]
    stage float4 OtherTint = float4(0, 0, 0, 0);

    stage float NormalOffset = 0;

    rgroup PerMaterial
    {
        stage Texture2D ShadowTexture;
        stage Texture2D OtherTexture;
    }

    override stage void VSMain()
    {
        streams.PositionWS = mul(streams.Position, World);
        streams.normalWS = mul(streams.meshNormal, (float3x3)WorldInverseTranspose);
        streams.ShadingPosition = mul(streams.Position + float4(streams.meshNormal * NormalOffset, 0), WorldViewProjection);
    }

    override stage void PSMain()
    {
        streams.DepthVS = -mul(streams.PositionWS, View).z;

        float4 shadowCol = ShadowTexture.Sample(LinearSampler, streams.TexCoord) * ShadowTint;
        float4 otherCol = ShadowTexture.Sample(LinearSampler, streams.TexCoord) * OtherTint;

        float shadow = 1;

        for(int i = 0; i < SpotLightCount; i++)
        {
            shadow *= ComputeSpotShadow(streams.PositionWS.xyz, i).x;
        }

        for(int j = 0; j < DirectionalCount; j++)
        {
            shadow *= ComputeDirectionalShadow(streams.PositionWS.xyz, j).x;
        }

        for(int k = 0; k < PointLightCount; k++)
        {
            shadow *= ComputePointShadow(streams.PositionWS.xyz, k).x;
        }

        streams.ColorTarget = lerp(otherCol, shadowCol, 1 - shadow);
    }

};