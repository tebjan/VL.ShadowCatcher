// Copyright (c) .NET Foundation and Contributors (https://dotnetfoundation.org/ & https://stride3d.net) and Silicon Studio Corp. (https://www.siliconstudio.co.jp)
// Distributed under the MIT license. See the LICENSE.md file in the project root for more information.

shader ShadowCatcherDirectional : ShadowCatcherFilterBase, Transformation
{
    rgroup PerLighting
    {
        StructuredBuffer<float> CascadeDepthSplits;
    }

    float3 ComputeDirectionalShadow(float3 position, int lightIndex)
    {
        int cascadeIndexBase = lightIndex * CascadeCount;

        // Only support a single light per group
        int cascadeIndex = 0;

        for(int i = 0; i < CascadeCount - 1; i++)
        {
            [flatten]
            if (streams.DepthVS > CascadeDepthSplits[cascadeIndexBase + i])
            {
                cascadeIndex = i + 1;
            }
        }

        float3 shadow = 1;

        // Offset the shadow position
        float3 shadowPosition = position.xyz;
        shadowPosition += GetShadowPositionOffset(OffsetScales[lightIndex], 0, streams.normalWS);

        // If we are within the cascades
        if (cascadeIndex < CascadeCount)
        {
            shadow = ComputeShadowFromCascade(shadowPosition, DepthBiases[lightIndex], WorldToShadowCascadeUV[cascadeIndexBase+cascadeIndex].Matrix, FilterSize[lightIndex]);

            // float nextSplit = CascadeDepthSplits[cascadeIndexBase + cascadeIndex];
            // float splitSize = nextSplit;
            // if(cascadeIndex > 0)
            // {
            //     splitSize = nextSplit - CascadeDepthSplits[cascadeIndexBase + cascadeIndex - 1];
            // }
            // float splitDist = (nextSplit - streams.DepthVS) / splitSize;

            // if (splitDist < 0.2)
            // {
            //     float lerpAmt = smoothstep(0.0, 0.2, splitDist);
            
            //     float nextShadow = ComputeShadowFromCascade(shadowPosition, DepthBiases[lightIndex], WorldToShadowCascadeUV[cascadeIndexBase+cascadeIndex+1].Matrix, FilterSize[lightIndex]);
            //     shadow = lerp(nextShadow, shadow, lerpAmt);
            // }
        }

        return shadow;
    }
};
